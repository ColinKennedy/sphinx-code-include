#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""The main module that adds the code-include directive to Sphinx."""

import os

from docutils import frontend
from docutils import nodes
from docutils import utils
from docutils.parsers import rst

from . import error_classes
from . import formatter
from . import source_code


_SETTINGS = frontend.OptionParser().get_default_values()
_REPORTER = utils.Reporter(
    "sphinx-code-include",
    1,
    _SETTINGS.halt_level,
    stream=_SETTINGS.warning_stream,
    debug=_SETTINGS.debug,
    encoding=_SETTINGS.error_encoding,
    error_handler=_SETTINGS.error_encoding_error_handler,
)


class Directive(rst.Directive):
    """A basic class that creates the syntax-highlighted code.

    Attributes:
        has_content (bool):
            This tells Sphinx to always expect some text on the same line as the directive.
        option_spec (dict[str, callable]):
            A schema which is used to search for optional flags for this directive.

    """

    has_content = True
    option_spec = {"no-unindent": rst.directives.flag}

    def run(self):
        """Create the code block, if it can.

        Returns:
            list[:class:`docutils.nodes.literal_block`]:
                The code-blocks that were generated by this class. If
                any URLs are missing, this function warngs the user and
                returns no code-blocks, instead.

        """
        self.assert_has_content()

        target = self.content[0]
        directive, namespace = formatter.get_raw_content(target)

        directive = formatter.get_converted_directive(directive) or directive

        try:
            code = source_code.get_source_code(directive, namespace)
        except error_classes.NotFoundFile as error:
            _REPORTER.warning('File "{error}" does not exist.'.format(error=error))

            return []
        except error_classes.NotFoundUrl as error:
            _REPORTER.warning(
                'Website "{error}" does not exist or is not reachable.'.format(
                    error=error
                )
            )

            return []
        except error_classes.MissingDirective:
            _REPORTER.warning(
                'Directive "{directive}" was not found in the intersphinx inventory.'.format(
                    directive=directive
                )
            )

            return []
        except error_classes.MissingNamespace:
            _REPORTER.warning(
                'Namespace "{namespace}" was not found in the intersphinx inventory.'.format(
                    namespace=namespace
                )
            )

            return []

        if "no-unindent" not in self.options:
            code = formatter.unindent_outer_whitespace(code)

        node = nodes.literal_block(code, code)
        node["language"] = "python"

        self.add_name(node)

        return [node]


def setup(application):
    """Add the code-include directive to Sphinx.

    Important:
        This function assumes that :func:`sphinx.ext.viewcode.setup` and
        :func:`sphinx.ext.interspinx.setup` have both been run before
        this function is called.

    Args:
        application (:class:`sphinx.application.Sphinx`):
            The main class which code-include is registered into.

    Returns:
        dict[str, bool]: Configuration settings about this extension.

    """
    source_code.APPLICATION = application

    application.add_directive("code-include", Directive)

    return {"parallel_read_safe": True, "parallel_write_safe": True}


# TODO : Migrate this over
# 3 packages were installed:
#   beautifulsoup4-4.8.1: /home/selecaoone/packages/beautifulsoup4/4.8.1/package.py (ff5a17a870e473adea6d65972631222d54a381e6)
#   soupsieve-1.9.4: /home/selecaoone/packages/soupsieve/1.9.4/package.py (3ff3e091e5895005aa8131c203654aa77b6eaff6)
#   bs4-0.0.1: /home/selecaoone/packages/bs4/0.0.1/package.py (ff5a17a870e473adea6d65972631222d54a381e6)
#
# 1 packages were already installed:
#   backports.functools_lru_cache-1.5: /home/selecaoone/packages/backports.functools_lru_cache/1.5/package.py (ff5a17a870e473adea6d65972631222d54a381e6)
#
